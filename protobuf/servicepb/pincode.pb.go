// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pincode.proto

package pincode

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TestA struct {
	Nest                 *TestB   `protobuf:"bytes,1,opt,name=nest" json:"nest,omitempty"`
	Num                  int64    `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestA) Reset()         { *m = TestA{} }
func (m *TestA) String() string { return proto.CompactTextString(m) }
func (*TestA) ProtoMessage()    {}
func (*TestA) Descriptor() ([]byte, []int) {
	return fileDescriptor_pincode_cdf1ee6670559cf1, []int{0}
}
func (m *TestA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TestA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestA.Merge(dst, src)
}
func (m *TestA) XXX_Size() int {
	return m.Size()
}
func (m *TestA) XXX_DiscardUnknown() {
	xxx_messageInfo_TestA.DiscardUnknown(m)
}

var xxx_messageInfo_TestA proto.InternalMessageInfo

func (m *TestA) GetNest() *TestB {
	if m != nil {
		return m.Nest
	}
	return nil
}

func (m *TestA) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type TestB struct {
	Num                  int64    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	Num2                 int64    `protobuf:"varint,2,opt,name=num2,proto3" json:"num2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestB) Reset()         { *m = TestB{} }
func (m *TestB) String() string { return proto.CompactTextString(m) }
func (*TestB) ProtoMessage()    {}
func (*TestB) Descriptor() ([]byte, []int) {
	return fileDescriptor_pincode_cdf1ee6670559cf1, []int{1}
}
func (m *TestB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TestB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestB.Merge(dst, src)
}
func (m *TestB) XXX_Size() int {
	return m.Size()
}
func (m *TestB) XXX_DiscardUnknown() {
	xxx_messageInfo_TestB.DiscardUnknown(m)
}

var xxx_messageInfo_TestB proto.InternalMessageInfo

func (m *TestB) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *TestB) GetNum2() int64 {
	if m != nil {
		return m.Num2
	}
	return 0
}

type TestC struct {
	Nest                 *TestD   `protobuf:"bytes,1,opt,name=nest" json:"nest,omitempty"`
	Num                  int64    `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestC) Reset()         { *m = TestC{} }
func (m *TestC) String() string { return proto.CompactTextString(m) }
func (*TestC) ProtoMessage()    {}
func (*TestC) Descriptor() ([]byte, []int) {
	return fileDescriptor_pincode_cdf1ee6670559cf1, []int{2}
}
func (m *TestC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TestC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestC.Merge(dst, src)
}
func (m *TestC) XXX_Size() int {
	return m.Size()
}
func (m *TestC) XXX_DiscardUnknown() {
	xxx_messageInfo_TestC.DiscardUnknown(m)
}

var xxx_messageInfo_TestC proto.InternalMessageInfo

func (m *TestC) GetNest() *TestD {
	if m != nil {
		return m.Nest
	}
	return nil
}

func (m *TestC) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type TestD struct {
	Num                  int64    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	Num2                 int64    `protobuf:"varint,2,opt,name=num2,proto3" json:"num2,omitempty"`
	Num3                 int64    `protobuf:"varint,3,opt,name=num3,proto3" json:"num3,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestD) Reset()         { *m = TestD{} }
func (m *TestD) String() string { return proto.CompactTextString(m) }
func (*TestD) ProtoMessage()    {}
func (*TestD) Descriptor() ([]byte, []int) {
	return fileDescriptor_pincode_cdf1ee6670559cf1, []int{3}
}
func (m *TestD) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestD.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TestD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestD.Merge(dst, src)
}
func (m *TestD) XXX_Size() int {
	return m.Size()
}
func (m *TestD) XXX_DiscardUnknown() {
	xxx_messageInfo_TestD.DiscardUnknown(m)
}

var xxx_messageInfo_TestD proto.InternalMessageInfo

func (m *TestD) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *TestD) GetNum2() int64 {
	if m != nil {
		return m.Num2
	}
	return 0
}

func (m *TestD) GetNum3() int64 {
	if m != nil {
		return m.Num3
	}
	return 0
}

type TestOneof struct {
	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	// Types that are valid to be assigned to Union:
	//	*TestOneof_First
	//	*TestOneof_Second
	//	*TestOneof_Third
	Union                isTestOneof_Union `protobuf_oneof:"union"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TestOneof) Reset()         { *m = TestOneof{} }
func (m *TestOneof) String() string { return proto.CompactTextString(m) }
func (*TestOneof) ProtoMessage()    {}
func (*TestOneof) Descriptor() ([]byte, []int) {
	return fileDescriptor_pincode_cdf1ee6670559cf1, []int{4}
}
func (m *TestOneof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestOneof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestOneof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TestOneof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestOneof.Merge(dst, src)
}
func (m *TestOneof) XXX_Size() int {
	return m.Size()
}
func (m *TestOneof) XXX_DiscardUnknown() {
	xxx_messageInfo_TestOneof.DiscardUnknown(m)
}

var xxx_messageInfo_TestOneof proto.InternalMessageInfo

type isTestOneof_Union interface {
	isTestOneof_Union()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TestOneof_First struct {
	First int64 `protobuf:"varint,2,opt,name=first,proto3,oneof"`
}
type TestOneof_Second struct {
	Second string `protobuf:"bytes,3,opt,name=second,proto3,oneof"`
}
type TestOneof_Third struct {
	Third uint64 `protobuf:"fixed64,4,opt,name=third,proto3,oneof"`
}

func (*TestOneof_First) isTestOneof_Union()  {}
func (*TestOneof_Second) isTestOneof_Union() {}
func (*TestOneof_Third) isTestOneof_Union()  {}

func (m *TestOneof) GetUnion() isTestOneof_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (m *TestOneof) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *TestOneof) GetFirst() int64 {
	if x, ok := m.GetUnion().(*TestOneof_First); ok {
		return x.First
	}
	return 0
}

func (m *TestOneof) GetSecond() string {
	if x, ok := m.GetUnion().(*TestOneof_Second); ok {
		return x.Second
	}
	return ""
}

func (m *TestOneof) GetThird() uint64 {
	if x, ok := m.GetUnion().(*TestOneof_Third); ok {
		return x.Third
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TestOneof) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TestOneof_OneofMarshaler, _TestOneof_OneofUnmarshaler, _TestOneof_OneofSizer, []interface{}{
		(*TestOneof_First)(nil),
		(*TestOneof_Second)(nil),
		(*TestOneof_Third)(nil),
	}
}

func _TestOneof_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TestOneof)
	// union
	switch x := m.Union.(type) {
	case *TestOneof_First:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.First))
	case *TestOneof_Second:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Second)
	case *TestOneof_Third:
		_ = b.EncodeVarint(4<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.Third))
	case nil:
	default:
		return fmt.Errorf("TestOneof.Union has unexpected type %T", x)
	}
	return nil
}

func _TestOneof_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TestOneof)
	switch tag {
	case 2: // union.first
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Union = &TestOneof_First{int64(x)}
		return true, err
	case 3: // union.second
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Union = &TestOneof_Second{x}
		return true, err
	case 4: // union.third
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Union = &TestOneof_Third{x}
		return true, err
	default:
		return false, nil
	}
}

func _TestOneof_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TestOneof)
	// union
	switch x := m.Union.(type) {
	case *TestOneof_First:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.First))
	case *TestOneof_Second:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Second)))
		n += len(x.Second)
	case *TestOneof_Third:
		n += 1 // tag and wire
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*TestA)(nil), "TestA")
	proto.RegisterType((*TestB)(nil), "TestB")
	proto.RegisterType((*TestC)(nil), "TestC")
	proto.RegisterType((*TestD)(nil), "TestD")
	proto.RegisterType((*TestOneof)(nil), "testOneof")
}
func (m *TestA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestA) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Nest != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPincode(dAtA, i, uint64(m.Nest.Size()))
		n1, err := m.Nest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPincode(dAtA, i, uint64(m.Num))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TestB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestB) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPincode(dAtA, i, uint64(m.Num))
	}
	if m.Num2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPincode(dAtA, i, uint64(m.Num2))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TestC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestC) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Nest != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPincode(dAtA, i, uint64(m.Nest.Size()))
		n2, err := m.Nest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPincode(dAtA, i, uint64(m.Num))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TestD) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestD) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPincode(dAtA, i, uint64(m.Num))
	}
	if m.Num2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPincode(dAtA, i, uint64(m.Num2))
	}
	if m.Num3 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPincode(dAtA, i, uint64(m.Num3))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TestOneof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestOneof) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPincode(dAtA, i, uint64(m.Num))
	}
	if m.Union != nil {
		nn3, err := m.Union.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TestOneof_First) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintPincode(dAtA, i, uint64(m.First))
	return i, nil
}
func (m *TestOneof_Second) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPincode(dAtA, i, uint64(len(m.Second)))
	i += copy(dAtA[i:], m.Second)
	return i, nil
}
func (m *TestOneof_Third) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x21
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Third))
	i += 8
	return i, nil
}
func encodeVarintPincode(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TestA) Size() (n int) {
	var l int
	_ = l
	if m.Nest != nil {
		l = m.Nest.Size()
		n += 1 + l + sovPincode(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovPincode(uint64(m.Num))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestB) Size() (n int) {
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovPincode(uint64(m.Num))
	}
	if m.Num2 != 0 {
		n += 1 + sovPincode(uint64(m.Num2))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestC) Size() (n int) {
	var l int
	_ = l
	if m.Nest != nil {
		l = m.Nest.Size()
		n += 1 + l + sovPincode(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovPincode(uint64(m.Num))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestD) Size() (n int) {
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovPincode(uint64(m.Num))
	}
	if m.Num2 != 0 {
		n += 1 + sovPincode(uint64(m.Num2))
	}
	if m.Num3 != 0 {
		n += 1 + sovPincode(uint64(m.Num3))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestOneof) Size() (n int) {
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovPincode(uint64(m.Num))
	}
	if m.Union != nil {
		n += m.Union.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestOneof_First) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPincode(uint64(m.First))
	return n
}
func (m *TestOneof_Second) Size() (n int) {
	var l int
	_ = l
	l = len(m.Second)
	n += 1 + l + sovPincode(uint64(l))
	return n
}
func (m *TestOneof_Third) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}

func sovPincode(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPincode(x uint64) (n int) {
	return sovPincode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPincode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPincode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPincode
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nest == nil {
				m.Nest = &TestB{}
			}
			if err := m.Nest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPincode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPincode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPincode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPincode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPincode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num2", wireType)
			}
			m.Num2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPincode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPincode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPincode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPincode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPincode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPincode
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nest == nil {
				m.Nest = &TestD{}
			}
			if err := m.Nest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPincode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPincode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPincode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestD) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPincode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestD: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestD: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPincode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num2", wireType)
			}
			m.Num2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPincode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num3", wireType)
			}
			m.Num3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPincode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num3 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPincode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPincode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestOneof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPincode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: testOneof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: testOneof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPincode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPincode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Union = &TestOneof_First{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Second", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPincode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPincode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Union = &TestOneof_Second{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Third", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Union = &TestOneof_Third{v}
		default:
			iNdEx = preIndex
			skippy, err := skipPincode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPincode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPincode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPincode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPincode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPincode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPincode
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPincode
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPincode(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPincode = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPincode   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pincode.proto", fileDescriptor_pincode_cdf1ee6670559cf1) }

var fileDescriptor_pincode_cdf1ee6670559cf1 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0xc8, 0xcc, 0x4b,
	0xce, 0x4f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x32, 0xe5, 0x62, 0x0d, 0x49, 0x2d,
	0x2e, 0x71, 0x14, 0x92, 0xe2, 0x62, 0xc9, 0x4b, 0x2d, 0x2e, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x36, 0x62, 0xd3, 0x03, 0x89, 0x3a, 0x05, 0x81, 0xc5, 0x84, 0x04, 0xb8, 0x98, 0xf3, 0x4a, 0x73,
	0x25, 0x98, 0x14, 0x18, 0x35, 0x98, 0x83, 0x40, 0x4c, 0x25, 0x5d, 0x88, 0x36, 0x27, 0x98, 0x14,
	0x23, 0x5c, 0x4a, 0x48, 0x88, 0x8b, 0x25, 0xaf, 0x34, 0xd7, 0x08, 0xaa, 0x1a, 0xcc, 0x86, 0xd9,
	0xe2, 0x8c, 0xd5, 0x16, 0x17, 0x9c, 0xb6, 0x38, 0x42, 0xb4, 0xb9, 0x10, 0x67, 0x0b, 0x54, 0xcc,
	0x58, 0x82, 0x19, 0x2e, 0x66, 0xac, 0x54, 0xc0, 0xc5, 0x59, 0x92, 0x5a, 0x5c, 0xe2, 0x9f, 0x97,
	0x9a, 0x9f, 0x86, 0xc5, 0x18, 0x31, 0x2e, 0xd6, 0xb4, 0xcc, 0xa2, 0xe2, 0x12, 0x88, 0x39, 0x1e,
	0x0c, 0x41, 0x10, 0xae, 0x90, 0x04, 0x17, 0x5b, 0x71, 0x6a, 0x72, 0x7e, 0x5e, 0x0a, 0xd8, 0x30,
	0x4e, 0x0f, 0x86, 0x20, 0x28, 0x1f, 0xa4, 0xa3, 0x24, 0x23, 0xb3, 0x28, 0x45, 0x82, 0x45, 0x81,
	0x51, 0x83, 0x0d, 0xa4, 0x03, 0xcc, 0x75, 0x62, 0xe7, 0x62, 0x2d, 0xcd, 0xcb, 0xcc, 0xcf, 0x73,
	0x12, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x67, 0x3c,
	0x96, 0x63, 0x48, 0x62, 0x03, 0x07, 0xb5, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xca, 0x11, 0xba,
	0x67, 0x7b, 0x01, 0x00, 0x00,
}
